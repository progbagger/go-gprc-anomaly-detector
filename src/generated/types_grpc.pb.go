// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: types.proto

package frequency

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrequencyRandomizerClient is the client API for FrequencyRandomizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrequencyRandomizerClient interface {
	SpawnFrequencies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FrequencyRandomizer_SpawnFrequenciesClient, error)
}

type frequencyRandomizerClient struct {
	cc grpc.ClientConnInterface
}

func NewFrequencyRandomizerClient(cc grpc.ClientConnInterface) FrequencyRandomizerClient {
	return &frequencyRandomizerClient{cc}
}

func (c *frequencyRandomizerClient) SpawnFrequencies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FrequencyRandomizer_SpawnFrequenciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrequencyRandomizer_ServiceDesc.Streams[0], "/FrequencyRandomizer/SpawnFrequencies", opts...)
	if err != nil {
		return nil, err
	}
	x := &frequencyRandomizerSpawnFrequenciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrequencyRandomizer_SpawnFrequenciesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type frequencyRandomizerSpawnFrequenciesClient struct {
	grpc.ClientStream
}

func (x *frequencyRandomizerSpawnFrequenciesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrequencyRandomizerServer is the server API for FrequencyRandomizer service.
// All implementations must embed UnimplementedFrequencyRandomizerServer
// for forward compatibility
type FrequencyRandomizerServer interface {
	SpawnFrequencies(*empty.Empty, FrequencyRandomizer_SpawnFrequenciesServer) error
	mustEmbedUnimplementedFrequencyRandomizerServer()
}

// UnimplementedFrequencyRandomizerServer must be embedded to have forward compatible implementations.
type UnimplementedFrequencyRandomizerServer struct {
}

func (UnimplementedFrequencyRandomizerServer) SpawnFrequencies(*empty.Empty, FrequencyRandomizer_SpawnFrequenciesServer) error {
	return status.Errorf(codes.Unimplemented, "method SpawnFrequencies not implemented")
}
func (UnimplementedFrequencyRandomizerServer) mustEmbedUnimplementedFrequencyRandomizerServer() {}

// UnsafeFrequencyRandomizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrequencyRandomizerServer will
// result in compilation errors.
type UnsafeFrequencyRandomizerServer interface {
	mustEmbedUnimplementedFrequencyRandomizerServer()
}

func RegisterFrequencyRandomizerServer(s grpc.ServiceRegistrar, srv FrequencyRandomizerServer) {
	s.RegisterService(&FrequencyRandomizer_ServiceDesc, srv)
}

func _FrequencyRandomizer_SpawnFrequencies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrequencyRandomizerServer).SpawnFrequencies(m, &frequencyRandomizerSpawnFrequenciesServer{stream})
}

type FrequencyRandomizer_SpawnFrequenciesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type frequencyRandomizerSpawnFrequenciesServer struct {
	grpc.ServerStream
}

func (x *frequencyRandomizerSpawnFrequenciesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// FrequencyRandomizer_ServiceDesc is the grpc.ServiceDesc for FrequencyRandomizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrequencyRandomizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FrequencyRandomizer",
	HandlerType: (*FrequencyRandomizerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SpawnFrequencies",
			Handler:       _FrequencyRandomizer_SpawnFrequencies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}
