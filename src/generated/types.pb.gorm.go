package frequency

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type MessageORM struct {
	CurrentTimestamp *time.Time
	Frequency        float64
	SessionId        string
}

// TableName overrides the default tablename generated by GORM
func (MessageORM) TableName() string {
	return "messages"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Message) ToORM(ctx context.Context) (MessageORM, error) {
	to := MessageORM{}
	var err error
	if prehook, ok := interface{}(m).(MessageWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.SessionId = m.SessionId
	to.Frequency = m.Frequency
	if m.CurrentTimestamp != nil {
		t := m.CurrentTimestamp.AsTime()
		to.CurrentTimestamp = &t
	}
	if posthook, ok := interface{}(m).(MessageWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *MessageORM) ToPB(ctx context.Context) (Message, error) {
	to := Message{}
	var err error
	if prehook, ok := interface{}(m).(MessageWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.SessionId = m.SessionId
	to.Frequency = m.Frequency
	if m.CurrentTimestamp != nil {
		to.CurrentTimestamp = timestamppb.New(*m.CurrentTimestamp)
	}
	if posthook, ok := interface{}(m).(MessageWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Message the arg will be the target, the caller the one being converted from

// MessageBeforeToORM called before default ToORM code
type MessageWithBeforeToORM interface {
	BeforeToORM(context.Context, *MessageORM) error
}

// MessageAfterToORM called after default ToORM code
type MessageWithAfterToORM interface {
	AfterToORM(context.Context, *MessageORM) error
}

// MessageBeforeToPB called before default ToPB code
type MessageWithBeforeToPB interface {
	BeforeToPB(context.Context, *Message) error
}

// MessageAfterToPB called after default ToPB code
type MessageWithAfterToPB interface {
	AfterToPB(context.Context, *Message) error
}

// DefaultCreateMessage executes a basic gorm create call
func DefaultCreateMessage(ctx context.Context, in *Message, db *gorm.DB) (*Message, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type MessageORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MessageORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskMessage patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskMessage(ctx context.Context, patchee *Message, patcher *Message, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Message, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCurrentTimestamp bool
	for i, f := range updateMask.Paths {
		if f == prefix+"SessionId" {
			patchee.SessionId = patcher.SessionId
			continue
		}
		if f == prefix+"Frequency" {
			patchee.Frequency = patcher.Frequency
			continue
		}
		if !updatedCurrentTimestamp && strings.HasPrefix(f, prefix+"CurrentTimestamp.") {
			if patcher.CurrentTimestamp == nil {
				patchee.CurrentTimestamp = nil
				continue
			}
			if patchee.CurrentTimestamp == nil {
				patchee.CurrentTimestamp = &timestamp.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CurrentTimestamp."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CurrentTimestamp, patchee.CurrentTimestamp, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CurrentTimestamp" {
			updatedCurrentTimestamp = true
			patchee.CurrentTimestamp = patcher.CurrentTimestamp
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListMessage executes a gorm list call
func DefaultListMessage(ctx context.Context, db *gorm.DB) ([]*Message, error) {
	in := Message{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []MessageORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Message{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type MessageORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MessageORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type MessageORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]MessageORM) error
}
